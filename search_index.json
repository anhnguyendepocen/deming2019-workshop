[
["index.html", "Targeted (Machine) Learning for Real-World Data Science and Causal Inference with the tlverse Software Ecosystem Software Workshops at Deming Conference on Applied Statistics (4-6 December 2019) Preface Important links Abstract Contents About the instructors and authors", " Targeted (Machine) Learning for Real-World Data Science and Causal Inference with the tlverse Software Ecosystem Software Workshops at Deming Conference on Applied Statistics (4-6 December 2019) Rachael Phillips, Nima Hejazi, Jeremy Coyle, Ivana Malenica, Alan Hubbard, Mark van der Laan updated: December 04, 2019 Preface This is an open source and fully-reproducible electronic vignette for the software workshops incorporated in the half-day tutorial (4 December 2019) and 2-day short course (5-6 December 2019) on applying Targeted Learning in practice given at the Deming Conference on Applied Statistics. The Hitchhiker’s Guide to the tlverse, or a Targeted Learning Practitioner’s Handbook is an in-draft book covering the tlverse software topics in greater detail and may serve as a useful accompanying resource to these workshop materials. Important links Software installation Please install the relevant software before the workshop. installation script Code R script files for each section of the workshop are available via the GitHub repository for the short course. https://github.com/tlverse/deming2019-workshop/tree/master/R Abstract Half-Day Tutorial – 9A-12P on December 4, 2019 Targeted Maximum Likelihood Estimation (TMLE) for Machine Learning: A Gentle Introduction During this half-day tutorial, we will delve into the utility of the roadmap of targeted learning for translating real-world data applications to a mathematical and statistical formulation of the relevant research question of interest. Participants will perform hands-on implementation of state-of-the-art targeted maximum likelihood estimators using the tlverse software ecosystem in the R programming language. Participants will actively learn and apply the core principles of the Targeted Learning methodology, which (1) generalizes machine learning to any estimand of interest; (2) obtains an optimal estimator of the given estimand, grounded in theory; (3) integrates modern ensemble machine learning techniques; and (4) provides formal statistical inference in terms of confidence intervals and testing of specified null hypotheses of interest. It is highly recommended for participants to have an understanding of basic statistical concepts such as confounding, probability distributions, confidence intervals, hypothesis tests, and regression. Advanced knowledge of mathematical statistics may be useful but is not necessary. Familiarity with the R programming language will be essential. 2-Day Short Course – 8A-5P on December 5-6, 2019 Targeted Learning in Data Science: Causal Inference for Observational and Experimental Data This 2-day short course will provide a comprehensive introduction to the field of targeted learning for causal inference and the corresponding tlverse software ecosystem. We will focus on targeted minimum loss-based estimators of causal effects, including those of static, dynamic, optimal dynamic, and stochastic interventions. These multiply robust, efficient plug-in estimators use state-of-the-art ensemble machine learning tools to flexibly adjust for confounding while yielding valid statistical inference. Estimators will be explored under various real-world scenarios: when the outcome is subject to missingness, when mediators are present on the causal pathway, in high dimensions, under two-phase sampling designs, and in right-censored survival settings possibly subject to competing risks. We will discuss the utility of this robust estimation strategy in comparison to conventional techniques, which often rely on restrictive statistical models and may therefore lead to severely biased inference. In addition to discussion, this course will incorporate both interactive activities and hands-on, guided R programming exercises, to allow participants the opportunity to familiarize themselves with methodology and tools that will translate to real-world analyses. It is highly recommended for participants to have an understanding of basic statistical concepts such as confounding, probability distributions, confidence intervals, hypothesis tests, and regression. Advanced knowledge of mathematical statistics may be useful but is not necessary. Familiarity with the R programming language will be essential. Contents These materials are feature modules centered around distinct causal questions, each motivated by a case study, alongside statistical methodology and software for assessing the causal claim of interest. Topics include Why we need a statistical revolution Introduction to the tlverse software ecosystem Roadmap of statistical learning with causal inference International Stroke Trial (IST), WASH Benefits, and Veterans’ Administration Lung Cancer Trial data Super (ensemble machine) learning with the sl3 tlverse R package Targeted learning for causal inference with the tmle3 tlverse R package Optimal treatment regimes and the tmle3mopttx tlverse R package Stochastic treatment regimes and the tmle3shift tlverse R package One-step TMLE for time-to-event outcomes with the MOSS R package Treatment specific mean outcome or marginal structural model for longitudinal data with the ltmle R package About the instructors and authors While this workshop is delivered by Mark van der Laan and Rachael Phillips, the majority of these materials are based on joint work with a team of six co-authors: Mark van der Laan Mark van der Laan, Ph.D., is Professor of Biostatistics and Statistics at UC Berkeley. His research interests include statistical methods in computational biology, survival analysis, censored data, adaptive designs, targeted maximum likelihood estimation, causal inference, data-adaptive loss-based learning, and multiple testing. His research group developed loss-based super learning in semiparametric models, based on cross-validation, as a generic optimal tool for the estimation of infinite-dimensional parameters, such as nonparametric density estimation and prediction with both censored and uncensored data. Building on this work, his research group developed targeted maximum likelihood estimation for a target parameter of the data-generating distribution in arbitrary semiparametric and nonparametric models, as a generic optimal methodology for statistical and causal inference. Most recently, Mark’s group has focused in part on the development of a centralized, principled set of software tools for targeted learning, the tlverse. For more information, see https://vanderlaan-lab.org. Rachael Phillips Rachael is a Ph.D. student in biostatistics, advised by Alan Hubbard and Mark van der Laan. She has an M.A. in Biostatistics, B.S. in Biology with a Chemistry minor and a B.A. in Mathematics with a Spanish minor. Rachael’s research focuses on narrowing the gap between the theory and application of modern statistics for real-world data science. Specifically, Rachael is motivated by issues arising in healthcare, and she leverages strategies rooted in causal inference and nonparametric estimation to build clinician-tailored, machine-driven solutions. Rachael is also passionate about free, online-mediated education and its corresponding pedagogy. Jeremy Coyle Jeremy Coyle, Ph.D., is a consulting data scientist and statistical programmer, currently leading the software development effort that has produced the tlverse ecosystem of R packages and related software tools. Jeremy earned his Ph.D. in Biostatistics from UC Berkeley in 2016, primarily under the supervision of Alan Hubbard. Alan Hubbard Alan Hubbard, Ph.D., is Professor of Biostatistics, former head of the Division of Biostatistics at UC Berkeley, and head of data analytics core at UC Berkeley’s SuperFund research program. His current research interests include causal inference, variable importance analysis, statistical machine learning, estimation of and inference for data-adaptive statistical target parameters, and targeted minimum loss-based estimation. Research in his group is generally motivated by applications to problems in computational biology, epidemiology, and precision medicine. Nima Hejazi Nima is a Ph.D. candidate in biostatistics with a designated emphasis in computational and genomic biology, working with Mark van der Laan and Alan Hubbard. Nima is affiliated with UC Berkeley’s Center for Computational Biology and is a former NIH Biomedical Big Data fellow. He earned is Master’s in Biostatistics (2017) and a Bachelor’s with a triple major in Molecular and Cell Biology (Neurobiology), Psychology, and Public Health (2015) at UC Berkeley. Nima’s interests span nonparametric estimation, high-dimensional inference, targeted learning, statistical computing, survival analysis, and computational biology, with an emphasis on the development of robust and efficient statistical methodologies that draw on the intersection of causal inference and statistical machine learning. For more information, see https://nimahejazi.org. Ivana Malenica Ivana is a Ph.D. candidate in biostatistics advised by Mark van der Laan. Ivana is currently a fellow at the Berkeley Institute for Data Science, after serving as a NIH Biomedical Big Data and Freeport-McMoRan Genomic Engine fellow. She earned her Master’s in Biostatistics and Bachelor’s in Mathematics, and spent some time at the Translational Genomics Research Institute. Very broadly, her research interests span non/semi-parametric theory, probability theory, machine learning, causal inference and high-dimensional statistics. Most of her current work involves complex dependent settings (dependence through time and network) and adaptive sequential designs. "],
["motivation.html", "Motivation", " Motivation “One enemy of robust science is our humanity — our appetite for being right, and our tendency to find patterns in noise, to see supporting evidence for what we already believe is true, and to ignore the facts that do not fit.” — (“Let’s Think About Cognitive Bias” 2015) Scientific research is at a unique point in history. The need to improve rigor and reproducibility in our field is greater than ever; corroboration moves science forward, yet there is a growing alarm about results that cannot be reproduced and that report false discoveries (Baker 2016). Consequences of not meeting this need will result in further decline in the rate of scientific progression, the reputation of the sciences, and the public’s trust in its findings (Munafò et al. 2017; “How Scientists Fool Themselves – and How They Can Stop” 2015). “The key question we want to answer when seeing the results of any scientific study is whether we can trust the data analysis.” — Peng (2015) Unfortunately, at its current state the culture of data analysis and statistics actually enables human bias through improper model selection. All hypothesis tests and estimators are derived from statistical models, so to obtain valid estimates and inference it is critical that the statistical model contains the process that generated the data. Perhaps treatment was randomized or only depended on a small number of baseline covariates; this knowledge should and can be incorporated in the model. Alternatively, maybe the data is observational, and there is no knowledge about the data-generating process (DGP). If this is the case, then the statistical model should contain all data distributions. In practice; however, models are not selected based on knowledge of the DGP, instead models are often selected based on (1) the p-values they yield, (2) their convenience of implementation, and/or (3) an analysts loyalty to a particular model. This practice of “cargo-cult statistics — the ritualistic miming of statistics rather than conscientious practice,” (Stark and Saltelli 2018) is characterized by arbitrary modeling choices, even though these choices often result in different answers to the same research question. That is, “increasingly often, [statistics] is used instead to aid and abet weak science, a role it can perform well when used mechanically or ritually,” as opposed to its original purpose of safeguarding against weak science (Stark and Saltelli 2018). This presents a fundamental drive behind the epidemic of false findings that scientific research is suffering from (van der Laan and Starmans 2014). “We suggest that the weak statistical understanding is probably due to inadequate”statistics lite&quot; education. This approach does not build up appropriate mathematical fundamentals and does not provide scientifically rigorous introduction into statistics. Hence, students’ knowledge may remain imprecise, patchy, and prone to serious misunderstandings. What this approach achieves, however, is providing students with false confidence of being able to use inferential tools whereas they usually only interpret the p-value provided by black box statistical software. While this educational problem remains unaddressed, poor statistical practices will prevail regardless of what procedures and measures may be favored and/or banned by editorials.&quot; — Szucs and Ioannidis (2017) Our team at The University of California, Berkeley, is uniquely positioned to provide such an education. Spearheaded by Professor Mark van der Laan, and spreading rapidly by many of his students and colleagues who have greatly enriched the field, the aptly named “Targeted Learning” methodology targets the scientific question at hand and is counter to the current culture of “convenience statistics” which opens the door to biased estimation, misleading results, and false discoveries. Targeted Learning restores the fundamentals that formalized the field of statistics, such as the that facts that a statistical model represents real knowledge about the experiment that generated the data, and a target parameter represents what we are seeking to learn from the data as a feature of the distribution that generated it (van der Laan and Starmans 2014). In this way, Targeted Learning defines a truth and establishes a principled standard for estimation, thereby inhibiting these all-too-human biases (e.g., hindsight bias, confirmation bias, and outcome bias) from infiltrating analysis. “The key for effective classical [statistical] inference is to have well-defined questions and an analysis plan that tests those questions.” — Nosek et al. (2018) Our objective is to provide training to students, researchers, industry professionals, faculty in science, public health, statistics, and other fields to empower them with the necessary knowledge and skills to utilize the sound methodology of Targeted Learning — a technique that provides tailored pre-specified machines for answering queries, so that each data analysis is completely reproducible, and estimators are efficient, minimally biased, and provide formal statistical inference. Just as the conscientious use of modern statistical methodology is necessary to ensure that scientific practice thrives, it remains critical to acknowledge the role that robust software plays in allowing practitioners direct access to published results. We recall that “an article…in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures,” thus making the availability and adoption of robust statistical software key to enhancing the transparency that is an inherent aspect of science (Buckheit and Donoho 1995). For a statistical methodology to be readily accessible in practice, it is crucial that it is accompanied by robust user-friendly software (Pullenayegum et al. 2016; Stromberg and others 2004). The tlverse software ecosystem was developed to fulfill this need for the Targeted Learning methodology. Not only does this software facilitate computationally reproducible and efficient analyses, it is also a tool for Targeted Learning education since its workflow mirrors that of the methodology. In particular, the tlverse paradigm does not focus on implementing a specific estimator or a small set of related estimators. Instead, the focus is on exposing the statistical framework of Targeted Learning itself — all R packages in the tlverse ecosystem directly model the key objects defined in the mathematical and theoretical framework of Targeted Learning. What’s more, the tlverse R packages share a core set of design principles centered on extensibility, allowing for them to be used in conjunction with each other and built upon one other in a cohesive fashion. In this workshop, the reader will embark on a journey through the tlverse ecosystem. Guided by R programming exercises, case studies, and intuitive explanation readers will build a toolbox for applying the Targeted Learning statistical methodology, which will translate to real-world causal inference analyses. Participants need not be a fully trained statistician to begin understanding and applying these methods. However, it is highly recommended for participants to have an understanding of basic statistical concepts such as confounding, probability distributions, confidence intervals, hypothesis tests, and regression. Advanced knowledge of mathematical statistics may be useful but is not necessary. Familiarity with the R programming language will be essential. We also recommend an understanding of introductory causal inference. For introductory materials for learning the R programming language we recommend the following free resources: Software Carpentry’s Programming with R Software Carpentry’s R for Reproducible Scientific Analysis Grolemund and Wickham’s R for Data Science For causal inference learning materials we recommend the following resources: Hernán MA, Robins JM (2019). Causal Inference. Jason A. Roy’s coursera Course A Crash Course in Causality: Inferring Causal Effects from Observational Data References "],
["tlverse.html", "Chapter 1 Welcome to the tlverse 1.1 Learning Objectives 1.2 What is the tlverse? 1.3 tlverse components 1.4 Installation", " Chapter 1 Welcome to the tlverse Jeremy Coyle 1.1 Learning Objectives Understand the tlverse ecosystem conceptually Identify the core components of the tlverse Install tlverse R packages Understand the Targeted Learning roadmap Learn about the WASH Benefits example data 1.2 What is the tlverse? The tlverse is a new framework for doing Targeted Learning in R, inspired by the tidyverse ecosystem of R packages. By analogy to the tidyverse: The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. So, the tlverse is an opinionated collection of R packages for Targeted Learning sharing an underlying philosophy, grammar, and set of data structures 1.3 tlverse components These are the main packages that represent the core of the tlverse: sl3: Modern Super Learning with Pipelines What? A modern object-oriented re-implementation of the Super Learner algorithm, employing recently developed paradigms for R programming. Why? A design that leverages modern tools for fast computation, is forward-looking, and can form one of the cornerstones of the tlverse. tmle3: An Engine for Targeted Learning What? A generalized framework that simplifies Targeted Learning by identifying and implementing a series of common statistical estimation procedures. Why? A common interface and engine that accommodates current algorithmic approaches to Targeted Learning and is still flexible enough to remain the engine even as new techniques are developed. In addition to the engines that drive development in the tlverse, there are some supporting packages – in particular, we have two… origami: A Generalized Framework for Cross-Validation What? A generalized framework for flexible cross-validation Why? Cross-validation is a key part of ensuring error estimates are honest and preventing overfitting. It is an essential part of the both the Super Learner algorithm and Targeted Learning. delayed: Parallelization Framework for Dependent Tasks What? A framework for delayed computations (futures) based on task dependencies. Why? Efficient allocation of compute resources is essential when deploying large-scale, computationally intensive algorithms. A key principle of the tlverse is extensibility. That is, we want to support new Targeted Learning estimators as they are developed. The model for this is new estimators are implemented in additional packages using the core packages above. There are currently two featured examples of this: tmle3mopttx: Optimal Treatments in tlverse What? Learn an optimal rule and estimate the mean outcome under the rule Why? Optimal Treatment is a powerful tool in precision healthcare and other settings where a one-size-fits-all treatment approach is not appropriate. tmle3shift: Shift Interventions in tlverse What? Shift interventions for continuous treatments Why? Not all treatment variables are discrete. Being able to estimate the effects of continuous treatment represents a powerful extension of the Targeted Learning approach. 1.4 Installation Before installing packages, please update your version of R. The tlverse ecosystem of packages are currently hosted at https://github.com/tlverse, not yet on CRAN. You can use the devtools package to install them: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tlverse/tlverse&quot;) The tlverse depends on a large number of other packages that are also hosted on GitHub. Because of this, you may see the following error: Error: HTTP error 403. API rate limit exceeded for 71.204.135.82. (But here&#39;s the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.) Rate limit remaining: 0/60 Rate limit reset at: 2019-03-04 19:39:05 UTC To increase your GitHub API rate limit - Use `usethis::browse_github_pat()` to create a Personal Access Token. - Use `usethis::edit_r_environ()` and add the token as `GITHUB_PAT`. This just means that R tried to install too many packages from GitHub in too short of a window. To fix this, you need to tell R how to use GitHub as your user (you’ll need a GitHub user account). Follow these two steps: Type usethis::browse_github_pat() in your R console, which will direct you to GitHub’s page to create a New Personal Access Token. Create a Personal Access Token simply by clicking “Generate token” at the bottom of the page. Copy your Personal Access Token, a long string of lowercase letters and numbers. Type usethis::edit_r_environ() in your R console, which will open your .Renviron file in the source window of RStudio. In your .Renviron file, type GITHUB_PAT= and then paste your Personal Access Token after the equals symbol with no space. In your .Renviron file, press the enter key to ensure that your .Renviron ends with a newline. Save your .Renviron file. Restart R for changes to take effect. You can restart R via the drop-down menu on the “Session” tab. The “Session” tab is at the top of the RStudio interface. After following these steps, you should be able to successfully install the package which threw the error above. This workshop has other dependencies, which you can install using the following linked script: install.R "],
["intro.html", "Chapter 2 The Roadmap of Statistical Learning 2.1 The Observed Data and Statistical Model 2.2 The Causal Model 2.3 The Parameter of Interest 2.4 Identifiability 2.5 Estimation: Targeted Maximum Likelihood Estimation 2.6 Inference", " Chapter 2 The Roadmap of Statistical Learning A central goal of the Targeted Learning statistical paradigm is to estimate scientifically relevant parameters in realistic (usually nonparametric) models and to do so with finite-sample robustness and consistent inference. 2.1 The Observed Data and Statistical Model Assume we have an i.i.d. sample of confounders, a binary intervention of interest, and an outcome, or are observed data is \\[ O = (W, A, Y).\\] The distribution of the observed data may be factorized as follows: \\[P(O) = P(W, A, Y) = P(W)P (A \\mid W) P(Y \\mid A, W).\\] To estimate a parameter of interest, a researcher need not necessarily be able to specify these whole or conditional distributions. Rather, each estimator only requires that certain parts of the distribution be known; for example, some may require estimates of \\(\\mathbb{E}(Y \\mid A, W)\\), the mean of \\(Y\\) within subgroups \\((A, W)\\), or the regression of the outcome on the exposure and confounders. At this stage in the roadmap, the researcher must specify a choice of statistical model to be used in estimating \\(\\mathbb{E}(Y \\mid A, W)\\) or other elements of the probability distribution needed to estimate the parameter of interest. Here, statistical model means any constraints on the model form that may be imposed by knowledge about the data-generating process – that is, known aspects of how the data were generated. Typically, the true model is a very large model, placing few constraints, if any, on the data-generating distribution, or a semi-parametric model. With few constraints on the data-generating distribution, and a potentially large number of covariates, data-adaptive, machine-learning approaches remain the only practical option for estimating components of the likelihood. The remainder of this course concerns how to do this as efficiently and robustly as possible, depending on the goal of the analysis. 2.2 The Causal Model The next step in the roadmap is to use a causal framework to formalize the experiment and thereby define the parameter of interest. Causal graphs are one useful tool to express what we know about the causal relations among variables that are relevant to the question under study (Pearl 2009). Ignoring error terms, we will assume the following ordering of the variables in \\(O\\). While directed acyclic graphs (DAGs) like above provide a convenient means by which to visualize causal relations between variables, the causal relations among variables can be represented via a set of structural equations: \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= f_A(W, U_A) \\\\ Y &amp;= f_Y(W, A, U_Y), \\end{align*}\\] where \\(U_W\\), \\(U_A\\), and \\(U_Y\\) represent the unmeasured exogenous background characteristics that influence the value of each variable. In the NPSEM, \\(f_W\\), \\(f_A\\) and \\(f_Y\\) denote that each variable (for \\(W\\), \\(A\\) and \\(Y\\), respectively) is a function of its parents and unmeasured background characteristics, but one typically has little information about particular functional constraints (e.g., linear, logit-linear, only one interaction, etc.). For this reason, they are called non-parametric structural equation models (NPSEMs). The DAG and set of nonparametric structural equations represent exactly the same information and so may be used interchangeably. 2.3 The Parameter of Interest The first hypothetical experiment we will consider is assigning exposure to the whole population and observing the outcome, and then assigning no exposure to the whole population and observing the outcome. On the nonparametric structural equations, this corresponds to a comparison of the outcome distribution in the population under two interventions: \\(A\\) is set to \\(1\\) for all individuals, and \\(A\\) is set to \\(0\\) for all individuals. These interventions imply two new nonparametric structural equation models. For the case \\(A = 1\\), we have \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 1 \\\\ Y(1) &amp;= f_Y(W, 1, U_Y), \\end{align*}\\] and for the case \\(A=0\\), \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 0 \\\\ Y(1) &amp;= f_Y(W, 0, U_Y). \\end{align*}\\] In these equations, \\(A\\) is no longer a function of \\(W\\) because we have intervened on the system, setting \\(A\\) deterministically to either of the values \\(1\\) or \\(0\\). The new symbols \\(Y(1)\\) and \\(Y(0)\\) indicate the outcome variable in our population if it were generated by the respective NPSEMs above; these are often called counterfactuals. The difference between the means of the outcome under these two interventions defines a parameter that is often called the “average treatment effect” (ATE), denoted \\[\\begin{equation}\\label{eqn:ate} ATE = \\mathbb{E}_X(Y(1)-Y(0)), \\end{equation}\\] where \\(\\mathbb{E}_X\\) is the mean under the theoretical (unobserved) full data \\(X = (W, Y(1), Y(0))\\). Note, we can define much more complicated interventions on NPSEM’s, such as interventions based upon rules (themselves based upon covariates), stochastic rules, etc. and each results in a different targeted parameter and entails different identifiability assumptions discussed below. 2.4 Identifiability Because we can never observe both \\(Y(0)\\) (the counterfactual outcome when \\(A=0\\)) and \\(Y(1)\\), we cannot estimate directly. Instead, we have to make assumptions under which this quantity may be estimated from the observed data \\(O \\sim P_0\\) under the data-generating distribution \\(P_0\\). Fortunately, given the causal model specified in the NPSEM above, we can, with a handful of untestable assumptions, estimate the ATE, even from observational data. These assumptions may be summarized as follows The causal graph implies \\(Y(a) \\perp A\\) for all \\(a \\in \\mathcal{A}\\), which is the randomization assumption. In the case of observational data, the analogous assumption is strong ignorability or no unmeasured confounding \\(Y(a) \\perp A \\mid W\\) for all \\(a \\in \\mathcal{A}\\); Although not represented in the causal graph, also required is the assumption of no interference between units, that is, the outcome for unit \\(i\\) \\(Y_i\\) is not affected by exposure for unit \\(j\\) \\(A_j\\) unless \\(i=j\\); Consistency of the treatment mechanism is also required, i.e., the outcome for unit \\(i\\) is \\(Y_i(a)\\) whenever \\(A_i = a\\), an assumption also known as “no other versions of treatment”; It is also necessary that all observed units, across strata defined by \\(W\\), have a bounded (non-deterministic) probability of receiving treatment – that is, \\(0 &lt; P_0(A = a \\mid W) &lt; 1\\) for all \\(a\\) and \\(W\\). This assumption is referred to as positivity. Remark: Together, (2) and (3), the assumptions of no interference and consistency, respectively, are jointly referred to as the stable unit treatment value assumption (SUTVA). Given these assumptions, the ATE may be re-written as a function of \\(P_0\\), specifically \\[\\begin{equation}\\label{eqn:estimand} ATE = \\mathbb{E}_0(Y(1) - Y(0)) = \\mathbb{E}_0 \\left(\\mathbb{E}_0[Y \\mid A = 1, W] - \\mathbb{E}_0[Y \\mid A = 0, W]\\right), \\end{equation}\\] or the difference in the predicted outcome values for each subject, under the contrast of treatment conditions (\\(A = 0\\) vs. \\(A = 1\\)), in the population, averaged over all observations. Thus, a parameter of a theoretical “full” data distribution can be represented as an estimand of the observed data distribution. Significantly, there is nothing about the representation in that requires parametric assumptions; thus, the regressions on the right hand side may be estimated freely with machine learning. With different parameters, there will be potentially different identifiability assumptions and the resulting estimands can be functions of different components of \\(P_0\\). We discuss several more complex estimands in later sections of this workshop. 2.5 Estimation: Targeted Maximum Likelihood Estimation Although we will discuss more in later sections, the goals of the estimators we desire should be that, among sensible (asymptotically consistent, regular) estimators, the estimator be asymptotically efficient in the statistical model of interest, and the estimator can be constructed for finite-sample performance improvements, relative to other estimators in the same class. These principles guide our approach to estimation: Super Learning for prediction (more generally density estimation) and TMLE for estimation of our intervention parameters of interest. 2.6 Inference The estimators we discuss are asymptotically linear, meaning that the difference in the estimate \\(\\Psi(P_n)\\) and the true parameter (\\(\\Psi(P_0)\\)) can be represented in first order by a i.i.d. sum: \\[\\begin{equation}\\label{eqn:IC} \\Psi(P_n) - \\Psi(P_0) = \\frac{1}{n} \\sum_{i=1}^n IC(O_i; \\nu) + o_p(1/\\sqrt{n}) \\end{equation}\\] where \\(IC(O_i; \\nu)\\) (the influence curve or function) is a function of the data and possibly other nuisance parameters \\(\\nu\\). Importantly, such estimators have mean-zero Gaussian limiting distributions; thus, in the univariate case, one has that \\[\\begin{equation}\\label{eqn:limit_dist} \\sqrt{n}(\\Psi(P_n) - \\Psi(P_0)) \\xrightarrow[]{D}N(0,\\mathbb{V}IC(O_i;\\nu)), \\end{equation}\\] so that inference for the estimator of interest may be obtained in terms of the influence function. For this simple case, a 95% confidence interval may be derived as: \\[\\begin{equation}\\label{eqn:CI} \\Psi(P^{\\star}_n) \\pm z_{1 - \\frac{\\alpha}{2}} \\sqrt{\\frac{\\hat{\\sigma}^2}{n}}, \\end{equation}\\] where \\(SE=\\sqrt{\\frac{\\hat{\\sigma}^2}{n}}\\) and \\(\\hat{\\sigma}^2\\) is the sample variance of the estimated IC’s: \\(IC(O; \\hat{\\nu})\\). One can use the functional delta method to derive the influence curve if a parameter of interest may be written as a function of other asymptotically linear estimators. Thus, we can derive robust inference for parameters that are estimated by fitting complex, machine learning algorithms and these methods are computationally quick (do not rely on re-sampling based methods like the bootstrap). References "],
["data.html", "Chapter 3 Datasets 3.1 International Stroke Trial Example Dataset 3.2 WASH Benefits Example Dataset 3.3 Veterans’ Administration Lung Cancer Trial Dataset", " Chapter 3 Datasets 3.1 International Stroke Trial Example Dataset The International Stroke Trial database contains individual patient data from the International Stroke Trial (IST), a multi-national randomized trial conducted between 1991 and 1996 (pilot phase between 1991 and 1993) that aimed to assess whether early administration of aspirin, heparin, both or neither influenced the clinical course of acute ischaemic stroke (Sandercock et al. 1997). The IST dataset includes data on 19,435 patients with acute stroke, with 99% complete follow-up. De-identified data are available for download at https://datashare.is.ed.ac.uk/handle/10283/128. This study is described in more detail at the bottom of this page, and in the corresponding block quote reference. In the example data for this workshop, we consider a sample of 5,000 patients and the binary outcome of recurrent ischemic stroke within 14 days after randomization. Also in our example data, we ensure that we have subjects with a missing outcome. The data dictionary is available in the data folder, ist_variables.pdf. library(tidyverse) # read in data ist &lt;- read_csv(&quot;https://raw.githubusercontent.com/tlverse/deming2019-workshop/master/data/ist_sample.csv&quot;) ist # A tibble: 5,000 x 26 RDELAY RCONSC SEX AGE RSLEEP RATRIAL RCT RVISINF RHEP24 RASP3 RSBP &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 46 F F 85 N N N N Y N 150 2 33 F M 71 Y Y Y Y N Y 180 3 6 D M 88 N Y N N N N 140 4 8 F F 68 Y N Y Y N N 118 5 13 F M 60 N N Y N N N 140 6 16 F F 71 Y N Y N N N 160 7 6 F M 71 Y N N N N Y 130 8 15 F M 84 N N Y N Y N 160 9 9 D F 81 N N N N N Y 138 10 20 F F 70 Y N N N N N 170 # … with 4,990 more rows, and 15 more variables: RDEF1 &lt;chr&gt;, RDEF2 &lt;chr&gt;, # RDEF3 &lt;chr&gt;, RDEF4 &lt;chr&gt;, RDEF5 &lt;chr&gt;, RDEF6 &lt;chr&gt;, RDEF7 &lt;chr&gt;, # RDEF8 &lt;chr&gt;, STYPE &lt;chr&gt;, RXHEP &lt;chr&gt;, REGION &lt;chr&gt;, # MISSING_RATRIAL_RASP3 &lt;dbl&gt;, MISSING_RHEP24 &lt;dbl&gt;, RXASP &lt;dbl&gt;, # DRSISC &lt;dbl&gt; For the purposes of this workshop, we we start by treating the data as independent and identically distributed (i.i.d.) random draws from a very large target population. We could, with available options, account for the clustering of the data (within sampled geographic regions), but, for simplification, we avoid these details in these workshop presentations, although modifications of our methodology for biased samples, repeated measures, etc., are available. We have 26 variables measured, of which 1 variable is set to be the outcome of interest. This outcome, \\(Y\\), indicates recurrent ischemic stroke within 14 days after randomization (DRSISC in ist); the treatment of interest, \\(A\\), is the randomized aspirin vs. no aspirin treatment allocation (RXASP in ist); and the adjustment set, \\(W\\), consists simply of other variable measured at baseline. In this data our outcome is occasionally missing, but we do not need to create a variable indicating this missingness (such as \\(\\Delta\\)) for analyses in the tlverse. If we let \\(\\Delta\\) denote the indicator that the outcome is missing such that \\(\\Delta = 1\\) when the outcome is observed and \\(\\Delta = 0\\) when the outcome is not observed, then we can denote our observed data structure as \\(n\\) i.i.d. copies of \\(O_i = (W_i, A_i, \\Delta_i, \\Delta Y_i)\\), for \\(i = 1, \\ldots, n\\). Using the skimr package, we can quickly summarize the variables in our data: library(skimr) skim(ist) (#tab:skim_ist_data)Data summary Name ist Number of rows 5000 Number of columns 26 _______________________ Column type frequency: character 19 numeric 7 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace RCONSC 0 1 1 1 0 3 0 SEX 0 1 1 1 0 2 0 RSLEEP 0 1 1 1 0 2 0 RATRIAL 0 1 1 1 0 3 0 RCT 0 1 1 1 0 2 0 RVISINF 0 1 1 1 0 2 0 RHEP24 0 1 1 1 0 3 0 RASP3 0 1 1 1 0 3 0 RDEF1 0 1 1 1 0 3 0 RDEF2 0 1 1 1 0 3 0 RDEF3 0 1 1 1 0 3 0 RDEF4 0 1 1 1 0 3 0 RDEF5 0 1 1 1 0 3 0 RDEF6 0 1 1 1 0 3 0 RDEF7 0 1 1 1 0 3 0 RDEF8 0 1 1 1 0 3 0 STYPE 0 1 3 4 0 5 0 RXHEP 0 1 1 1 0 4 0 REGION 0 1 10 26 0 7 0 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist RDELAY 0 1 20.14 12.43 1 9 19 29 48 ▇▆▆▃▂ AGE 0 1 71.93 11.65 16 65 74 81 99 ▁▁▃▇▂ RSBP 0 1 160.62 27.84 71 140 160 180 290 ▁▇▇▁▁ MISSING_RATRIAL_RASP3 0 1 0.05 0.22 0 0 0 0 1 ▇▁▁▁▁ MISSING_RHEP24 0 1 0.02 0.13 0 0 0 0 1 ▇▁▁▁▁ RXASP 0 1 0.50 0.50 0 0 0 1 1 ▇▁▁▁▇ DRSISC 10 1 0.02 0.15 0 0 0 0 1 ▇▁▁▁▁ A convenient summary of the relevant variables is given just above. &quot;The study had a prospective, randomised, open treatment, blinded outcome (PROBE) design. The inclusion criteria were: clinical diagnosis of acute ischaemic stroke, with onset within the previous 48 hours and no clear indication for, or clear contraindication to, treatment with aspirin or subcutaneous heparin. Unlike many stroke trials of that era (and subsequently), the study did not set an upper age limit. Patients were to have a CT brain scan to confirm the diagnosis of stroke, and this was to be done before randomisation if at all possible. To enter a patient in the study, the clinician telephoned a central randomisation service (at the Clinical Trial Service Unit, Oxford) during this telephone call, the baseline variables were entered and checked, and once validated, the computer allocated the treatment and the telephonist then informed the clinician. The patients and treating clinicians were not blinded to the treatment given. Early outcome data were collected by the treating physician who completed a follow-up form at 14 days, death or hospital discharge (whichever occurred first). This form recorded data on events in hospital within 14 days, and the doctor’s opinion on the final diagnosis of the initial event that led to randomisation. These unblinded data, may therefore be subject to some degree of bias. The primary outcome was the proportion of patients who were either dead or dependent on other people for activities of daily living at six months after randomisation. This outcome was collected by postal questionnaire mailed directly to the patient, or (in Italy) by telephone interview of the patient by a trained researcher, blinded to treatment allocation. The primary outcome was therefore assessed - as far as practicable - blind to treatment allocation and hence should be free from bias. We re-checked the data set for inaccuracies and inconsistencies and extracted data on the variables assessed at randomisation, and at the two outcome assessment points: at 14-days after randomisation, death or prior hospital discharge (whichever occurred first) and at 6-months. — Sandercock, Niewada, and Członkowska (2011) 3.2 WASH Benefits Example Dataset The data come from a study of the effect of water quality, sanitation, hand washing, and nutritional interventions on child development in rural Bangladesh (WASH Benefits Bangladesh): a cluster-randomised controlled trial (Luby et al. 2018). The study enrolled pregnant women in their first or second trimester from the rural villages of Gazipur, Kishoreganj, Mymensingh, and Tangail districts of central Bangladesh, with an average of eight women per cluster. Groups of eight geographically adjacent clusters were block-randomised, using a random number generator, into six intervention groups (all of which received weekly visits from a community health promoter for the first 6 months and every 2 weeks for the next 18 months) and a double-sized control group (no intervention or health promoter visit). The six intervention groups were: chlorinated drinking water; improved sanitation; hand-washing with soap; combined water, sanitation, and hand washing; improved nutrition through counseling and provision of lipid-based nutrient supplements; and combined water, sanitation, handwashing, and nutrition. In the workshop, we concentrate on child growth (size for age) as the outcome of interest. For reference, this trial was registered with ClinicalTrials.gov as NCT01590095. library(tidyverse) # read in data dat &lt;- read_csv(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;) dat # A tibble: 4,695 x 28 whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; 1 0 Cont… N05265 9 268 male 30 Prima… 146. Food S… 3 2 -1.16 Cont… N05265 9 286 male 25 Prima… 149. Modera… 2 3 -1.05 Cont… N08002 9 264 male 25 Prima… 152. Food S… 1 4 -1.26 Cont… N08002 9 252 fema… 28 Prima… 140. Food S… 3 5 -0.59 Cont… N06531 9 336 fema… 19 Secon… 151. Food S… 2 6 -0.51 Cont… N06531 9 304 male 20 Secon… 154. Severe… 0 7 -2.46 Cont… N08002 9 336 fema… 19 Prima… 151. Food S… 2 8 -0.6 Cont… N06528 9 312 fema… 25 No ed… 142. Food S… 2 9 -0.23 Cont… N06528 9 322 male 30 Secon… 153. Food S… 1 10 -0.14 Cont… N06453 9 376 male 30 No ed… 156. Modera… 2 # … with 4,685 more rows, and 17 more variables: Ncomp &lt;dbl&gt;, watmin &lt;dbl&gt;, # elec &lt;dbl&gt;, floor &lt;dbl&gt;, walls &lt;dbl&gt;, roof &lt;dbl&gt;, asset_wardrobe &lt;dbl&gt;, # asset_table &lt;dbl&gt;, asset_chair &lt;dbl&gt;, asset_khat &lt;dbl&gt;, asset_chouki &lt;dbl&gt;, # asset_tv &lt;dbl&gt;, asset_refrig &lt;dbl&gt;, asset_bike &lt;dbl&gt;, asset_moto &lt;dbl&gt;, # asset_sewmach &lt;dbl&gt;, asset_mobile &lt;dbl&gt; We have 28 variables measured, of which 1 variable is set to be the outcome of interest. This outcome, \\(Y\\), is the weight-for-height Z-score (whz in dat); the treatment of interest, \\(A\\), is the randomized treatment group (tr in dat); and the adjustment set, \\(W\\), consists simply of everything else. This results in our observed data structure being \\(n\\) i.i.d. copies of \\(O_i = (W_i, A_i, Y_i)\\), for \\(i = 1, \\ldots, n\\). Like before, we can summarize the variables measured in the WASH Benefits data set with skimr: skim(dat) (#tab:skim_washb_data)Data summary Name dat Number of rows 4695 Number of columns 28 _______________________ Column type frequency: character 5 numeric 23 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace tr 0 1 3 15 0 7 0 fracode 0 1 2 6 0 20 0 sex 0 1 4 6 0 2 0 momedu 0 1 12 15 0 3 0 hfiacat 0 1 11 24 0 4 0 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist whz 0 1.00 -0.59 1.03 -4.67 -1.28 -0.6 0.08 4.97 ▁▆▇▁▁ month 0 1.00 6.45 3.33 1.00 4.00 6.0 9.00 12.00 ▇▇▅▇▇ aged 0 1.00 266.32 52.17 42.00 230.00 266.0 303.00 460.00 ▁▂▇▅▁ momage 18 1.00 23.91 5.24 14.00 20.00 23.0 27.00 60.00 ▇▇▁▁▁ momheight 31 0.99 150.50 5.23 120.65 147.05 150.6 154.06 168.00 ▁▁▆▇▁ Nlt18 0 1.00 1.60 1.25 0.00 1.00 1.0 2.00 10.00 ▇▂▁▁▁ Ncomp 0 1.00 11.04 6.35 2.00 6.00 10.0 14.00 52.00 ▇▃▁▁▁ watmin 0 1.00 0.95 9.48 0.00 0.00 0.0 1.00 600.00 ▇▁▁▁▁ elec 0 1.00 0.60 0.49 0.00 0.00 1.0 1.00 1.00 ▆▁▁▁▇ floor 0 1.00 0.11 0.31 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ walls 0 1.00 0.72 0.45 0.00 0.00 1.0 1.00 1.00 ▃▁▁▁▇ roof 0 1.00 0.99 0.12 0.00 1.00 1.0 1.00 1.00 ▁▁▁▁▇ asset_wardrobe 0 1.00 0.17 0.37 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▂ asset_table 0 1.00 0.73 0.44 0.00 0.00 1.0 1.00 1.00 ▃▁▁▁▇ asset_chair 0 1.00 0.73 0.44 0.00 0.00 1.0 1.00 1.00 ▃▁▁▁▇ asset_khat 0 1.00 0.61 0.49 0.00 0.00 1.0 1.00 1.00 ▅▁▁▁▇ asset_chouki 0 1.00 0.78 0.41 0.00 1.00 1.0 1.00 1.00 ▂▁▁▁▇ asset_tv 0 1.00 0.30 0.46 0.00 0.00 0.0 1.00 1.00 ▇▁▁▁▃ asset_refrig 0 1.00 0.08 0.27 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ asset_bike 0 1.00 0.32 0.47 0.00 0.00 0.0 1.00 1.00 ▇▁▁▁▃ asset_moto 0 1.00 0.07 0.25 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ asset_sewmach 0 1.00 0.06 0.25 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ asset_mobile 0 1.00 0.86 0.35 0.00 1.00 1.0 1.00 1.00 ▁▁▁▁▇ Note that the asset variables reflect socio-economic status of the study participants. 3.3 Veterans’ Administration Lung Cancer Trial Dataset This data corresponds to a study conducted by the US Veterans Administration. Male patients with advanced inoperable lung cancer were given either the standard therapy or a test chemotherapy. The primary goal of the study was to assess if the test chemotherapy improved survival. This data set has been published in Kalbfleisch and Prentice (2011) and it is available in the MASS and survival R packages. Time to death was recorded for 128 patients, and 9 patients left the study before death. Various covariates were also documented for each patient. library(tidyverse) # read in data vet &lt;- read_csv(&quot;https://raw.githubusercontent.com/tlverse/deming2019-workshop/master/data/veteran.csv&quot;) vet # A tibble: 137 x 9 X1 trt celltype time status karno diagtime age prior &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 squamous 72 1 60 7 69 0 2 2 1 squamous 411 1 70 5 64 10 3 3 1 squamous 228 1 60 3 38 0 4 4 1 squamous 126 1 60 9 63 10 5 5 1 squamous 118 1 70 11 65 10 6 6 1 squamous 10 1 20 5 49 0 7 7 1 squamous 82 1 40 10 69 10 8 8 1 squamous 110 1 80 29 68 0 9 9 1 squamous 314 1 50 18 43 0 10 10 1 squamous 100 0 70 6 70 0 # … with 127 more rows A snapshot of the data set in shown below: skim(vet) (#tab:skim_vet_data)Data summary Name vet Number of rows 137 Number of columns 9 _______________________ Column type frequency: character 1 numeric 8 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace celltype 0 1 5 9 0 4 0 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist X1 0 1 69.00 39.69 1 35 69 103 137 ▇▇▇▇▇ trt 0 1 1.50 0.50 1 1 1 2 2 ▇▁▁▁▇ time 0 1 121.63 157.82 1 25 80 144 999 ▇▁▁▁▁ status 0 1 0.93 0.25 0 1 1 1 1 ▁▁▁▁▇ karno 0 1 58.57 20.04 10 40 60 75 99 ▁▅▇▇▂ diagtime 0 1 8.77 10.61 1 3 5 11 87 ▇▁▁▁▁ age 0 1 58.31 10.54 34 51 62 66 81 ▃▂▅▇▁ prior 0 1 2.92 4.56 0 0 0 10 10 ▇▁▁▁▃ References "],
["super-ensemble-machine-learning.html", "Chapter 4 Super (Ensemble Machine) Learning 4.1 Introduction 4.2 sl3 “Microwave Dinner” Implementation 4.3 Extensions 4.4 Exercise 4.5 Summary", " Chapter 4 Super (Ensemble Machine) Learning Based on the sl3 R package by Jeremy Coyle, Nima Hejazi, Ivana Malenica, and Oleg Sofrygin. Updated: 2019-12-04 4.1 Introduction Once the statistical estimation problem is defined, as described in the The Targeted Learning Roadmap, we are ready to construct the TMLE: an asymptotically efficient substitution estimator of this target quantity. The first step in the estimation procedure is an initial estimate of the data-generating distribution, or the relevant part of this distribution that is needed to evaluate the target parameter. For this initial estimation, we use the super learner (van der Laan, Polley, and Hubbard 2007), an important step for creating a robust estimator. 4.1.1 Super Learning A common task in statistical data analysis is estimator selection (e.g., for prediction). There is no universally optimal machine learning algorithm for density estimation or prediction. For some data, one needs learners that can model a complex function. For others, possibly as a result of noise or insufficient sample size, a simple, parametric model might fit best. Super Learner, an ensemble learner, solves this issue, by allowing a combination of learners from the simplest (intercept-only) to most complex (neural nets, random forests, SVM, etc). It works by using cross-validation in a manner which guarantees that the resulting fit will be as good as possible, given the learners provided. Note: even a combination of poor learners can sometimes result in good fit. It is very important to have good candidates in our library, possibly incorporating known knowledge about the system in question. 4.1.1.1 General Overview of the Algorithm What is cross-validation and how does it work? There are many different cross-validation schemes, designed to accommodate different study designs and data structures. The figure below shows an example of 10-fold cross-validation. General step-by-step overview of the Super Learner algorithm: Break up the sample evenly into V-folds (say V=10). For each of these 10 folds, remove that portion of the sample (kept out as validation sample) and the remaining will be used to fit learners (training sample). Fit each learner on the training sample (note, some learners will have their own internal cross-validation procedure or other methods to select tuning parameters). For each observation in the corresponding validation sample, predict the outcome using each of the learners, so if there are \\(p\\) learners, then there would be \\(p\\) predictions. Take out another validation sample and repeat until each of the V-sets of data are removed. Compare the cross-validated fit of the learners across all observations based on specified loss function (e.g., squared error, negative log-likelihood, …) by calculating the corresponding average loss (risk). Either: choose the learner with smallest risk and apply that learner to entire data set (resulting SL fit), do a weighted average of the learners to minimize the cross-validated risk (construct an ensemble of learners), by re-fitting the learners on the original data set, and use the weights above to get the SL fit. Note, this entire procedure can be itself cross-validated to get a consistent estimate of the future performance of the SL fit. How to pick a Super Learner library? A library is simply a collection of algorithms. The algorithms in the library should come from contextual knowledge and a large set of “default” algorithms. The algorithms may range from a simple linear regression model to multi-step algorithms involving screening covariates, penalizations, optimizing tuning parameters, etc. 4.1.1.2 Example: Super Learner In Prediction We observe a learning data set \\(X_i=(Y_i,W_i)\\), for \\(i=1, ..., n\\). Here, \\(Y_i\\) is the outcome of interest, and \\(W_i\\) is a p-dimensional set of covariates. Our objective is to estimate the function \\(\\psi_0(W) = E(Y|W)\\). This function can be expressed as the minimizer of the expected loss: \\(\\psi_0(W) = \\text{argmin}_{\\psi} E[L(X,\\psi(W))]\\). Here, the loss function is represented as \\(L\\) (e.g., squared error loss, \\(L: (Y-\\psi(W))^2)\\)). 4.1.1.3 Why use the Super Learner? For prediction, one can use the cross-validated risk to empirically determine the relative performance of SL and competing methods. When we have tested different algorithms on actual data and looked at the performance (e.g., MSE of prediction), never does one algorithm always win (see below). Below shows the results of such a study, comparing the fits of several different learners, including the SL algorithms. Super Learner performs asymptotically as well as best possible weighted combination. By including all competitors in the library of candidate estimators (glm, neural nets, SVMs, random forest, etc.), the Super Learner will asymptotically outperform any of its competitors- even if the set of competitors is allowed to grow polynomial in sample size. Motivates the name “Super Learner”: it provides a system of combining many estimators into an improved estimator. Review of the Super Learner Loss-function-based tool that uses V-fold cross-validation to obtain the best prediction of the relevant part of the likelihood that’s needed to evaluate target parameter. Requires expressing the estimand as the minimizer of an expected loss, and proposing a library of algorithms (“learners” in sl3 nomenclature) that we think might be consistent with the true data-generating distribution. The discrete super learner, or cross-validated selector, is the algorithm in the library that minimizes the V-fold cross-validated empirical risk. The super learner is a weighted average of the library of algorithms, where the weights are chosen to minimize the V-fold cross-validated empirical risk of the library. Restricting the weights (“metalearner” in sl3 nomenclature) to be positive and sum to one (convex combination) has been shown to improve upon the discrete super learner (Polley and van der Laan 2010; van der Laan, Polley, and Hubbard 2007). Proven to be asymptotically as accurate as the best possible prediction algorithm that is tested (van der Laan and Dudoit 2003; van der Vaart, Dudoit, and van der Laan 2006). This background material is described in greater detail in the accompanying tlverse handbook sl3 chapter. 4.2 sl3 “Microwave Dinner” Implementation We begin by illustrating the core functionality of the super learner algorithm as implemented in sl3. For those who are interested in the internals of sl3, see this sl3 introductory tutorial. The sl3 implementation consists of the following steps: Load the necessary libraries and data Define the machine learning task Make a super learner by creating library of base learners and a metalearner Train the super learner on the machine learning task Obtain predicted values WASH Benefits Study Example Using the IST data, we are interested in predicting recurrent stroke DRSISC using the available covariate data. 0. Load the necessary libraries and data library(kableExtra) library(knitr) library(skimr) library(tidyverse) library(data.table) library(sl3) library(SuperLearner) library(origami) set.seed(7194) # load data set and take a peek ist_data &lt;- read.csv(&quot;https://raw.githubusercontent.com/tlverse/deming2019-workshop/master/data/ist_sample.csv&quot;) head(ist_data) %&gt;% kable(digits = 4) %&gt;% kable_styling(fixed_thead = T, font_size = 10) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;250px&quot;) RDELAY RCONSC SEX AGE RSLEEP RATRIAL RCT RVISINF RHEP24 RASP3 RSBP RDEF1 RDEF2 RDEF3 RDEF4 RDEF5 RDEF6 RDEF7 RDEF8 STYPE RXHEP REGION MISSING_RATRIAL_RASP3 MISSING_RHEP24 RXASP DRSISC 46 F F 85 N N N N Y N 150 N Y N N N N N N PACS N Europe and Central Asia 0 0 0 0 33 F M 71 Y Y Y Y N Y 180 Y Y Y Y Y N N N TACS L East Asia and Pacific 0 0 0 0 6 D M 88 N Y N N N N 140 Y Y Y C C C C C PACS N Europe and Central Asia 0 0 0 0 8 F F 68 Y N Y Y N N 118 Y Y N N N N N N LACS M Europe and Central Asia 0 0 0 0 13 F M 60 N N Y N N N 140 Y Y Y Y N N Y Y POCS N Europe and Central Asia 0 0 1 0 16 F F 71 Y N Y N N N 160 N Y N N N N N N PACS N Europe and Central Asia 0 0 1 0 1. Define the machine learning task To define the machine learning “task” (predict stroke DRSISC using the available covariate data), we need to create an sl3_Task object. The sl3_Task keeps track of the roles the variables play in the machine learning problem, the data, and any metadata (e.g., observational-level weights, id, offset). We are not interested in predicting missing outcomes. We set drop_missing_outcome = TRUE when we create the task. In the next chapter, we estimate this missingness mechanism and account for it in the estimation. # specify the outcome and covariates outcome &lt;- &quot;DRSISC&quot; covars &lt;- colnames(ist_data)[-which(names(ist_data) == outcome)] # create the sl3 task ist_task &lt;- make_sl3_Task( data = ist_data, covariates = covars, outcome = outcome, drop_missing_outcome = TRUE ) # examine the task ist_task A sl3 Task with 4990 obs and these nodes: $covariates [1] &quot;RDELAY&quot; &quot;RCONSC&quot; &quot;SEX&quot; [4] &quot;AGE&quot; &quot;RSLEEP&quot; &quot;RATRIAL&quot; [7] &quot;RCT&quot; &quot;RVISINF&quot; &quot;RHEP24&quot; [10] &quot;RASP3&quot; &quot;RSBP&quot; &quot;RDEF1&quot; [13] &quot;RDEF2&quot; &quot;RDEF3&quot; &quot;RDEF4&quot; [16] &quot;RDEF5&quot; &quot;RDEF6&quot; &quot;RDEF7&quot; [19] &quot;RDEF8&quot; &quot;STYPE&quot; &quot;RXHEP&quot; [22] &quot;REGION&quot; &quot;MISSING_RATRIAL_RASP3&quot; &quot;MISSING_RHEP24&quot; [25] &quot;RXASP&quot; $outcome [1] &quot;DRSISC&quot; $id NULL $weights NULL $offset NULL 2. Make a super learner Now that we have defined our machine learning problem with the task, we are ready to “make” the super learner. This requires specification of Base learning algorithms, to establish a library of learners that we think might be consistent with the true data-generating distribution. Metalearner, to ensemble the base learners. We might also incorporate Feature selection, to pass only a subset of the predictors to the algorithm. Hyperparameter specification, to tune base learners. Learners have properties that indicate what features they support. We may use sl3_list_properties() to get a list of all properties supported by at least one learner. sl3_list_properties() [1] &quot;binomial&quot; &quot;categorical&quot; &quot;continuous&quot; [4] &quot;cv&quot; &quot;density&quot; &quot;ids&quot; [7] &quot;multivariate_outcome&quot; &quot;offset&quot; &quot;preprocessing&quot; [10] &quot;timeseries&quot; &quot;weights&quot; &quot;wrapper&quot; Since we have a binomial outcome, we may identify the learners that support this outcome type with sl3_list_learners(). sl3_list_learners(c(&quot;binomial&quot;)) [1] &quot;Lrnr_bartMachine&quot; &quot;Lrnr_caret&quot; [3] &quot;Lrnr_dbarts&quot; &quot;Lrnr_earth&quot; [5] &quot;Lrnr_gam&quot; &quot;Lrnr_gbm&quot; [7] &quot;Lrnr_glm&quot; &quot;Lrnr_glm_fast&quot; [9] &quot;Lrnr_glmnet&quot; &quot;Lrnr_grf&quot; [11] &quot;Lrnr_h2o_glm&quot; &quot;Lrnr_h2o_grid&quot; [13] &quot;Lrnr_hal9001&quot; &quot;Lrnr_mean&quot; [15] &quot;Lrnr_optim&quot; &quot;Lrnr_pkg_SuperLearner&quot; [17] &quot;Lrnr_pkg_SuperLearner_method&quot; &quot;Lrnr_pkg_SuperLearner_screener&quot; [19] &quot;Lrnr_polspline&quot; &quot;Lrnr_randomForest&quot; [21] &quot;Lrnr_ranger&quot; &quot;Lrnr_rpart&quot; [23] &quot;Lrnr_screener_corP&quot; &quot;Lrnr_screener_corRank&quot; [25] &quot;Lrnr_screener_randomForest&quot; &quot;Lrnr_solnp&quot; [27] &quot;Lrnr_stratified&quot; &quot;Lrnr_svm&quot; [29] &quot;Lrnr_xgboost&quot; Now that we have an idea of some learners, we can construct them using the make_learner function. # choose base learners lrnr_mean &lt;- make_learner(Lrnr_mean) lrnr_glm &lt;- make_learner(Lrnr_glm) lrnr_gam &lt;- make_learner(Lrnr_gam) We can customize learner hyperparameters to incorporate a diversity of different settings. Documentation for the learners and their hyperparameters can be found in the sl3 Learners Reference. lrnr_ranger50 &lt;- make_learner(Lrnr_ranger, num.trees = 50) lrnr_hal_simple &lt;- make_learner(Lrnr_hal9001, max_degree = 2, n_folds = 2) lrnr_lasso &lt;- make_learner(Lrnr_glmnet) # alpha default is 1 lrnr_ridge &lt;- make_learner(Lrnr_glmnet, alpha = 0) lrnr_elasticnet &lt;- make_learner(Lrnr_glmnet, alpha = .5) We can also include learners from the SuperLearner R package. lrnr_bayesglm &lt;- Lrnr_pkg_SuperLearner$new(&quot;SL.bayesglm&quot;) Here is a fun trick to create customized learners over a grid of parameters. # I like to crock pot my super learners grid_params &lt;- list(cost = c(0.01, 0.1, 1, 10, 100, 1000), gamma = c(0.001, 0.01, 0.1, 1), kernel = c(&quot;polynomial&quot;, &quot;radial&quot;, &quot;sigmoid&quot;), degree = c(1, 2, 3)) grid &lt;- expand.grid(grid_params, KEEP.OUT.ATTRS = FALSE) params_default &lt;- list(nthread = getOption(&quot;sl.cores.learners&quot;, 1)) svm_learners &lt;- apply(grid, MARGIN = 1, function(params_tune) { do.call(Lrnr_svm$new, c(params_default, as.list(params_tune)))}) grid_params &lt;- list(max_depth = c(2, 4, 6, 8), eta = c(0.001, 0.01, 0.1, 0.2, 0.3), nrounds = c(20, 50)) grid &lt;- expand.grid(grid_params, KEEP.OUT.ATTRS = FALSE) params_default &lt;- list(nthread = getOption(&quot;sl.cores.learners&quot;, 1)) xgb_learners &lt;- apply(grid, MARGIN = 1, function(params_tune) { do.call(Lrnr_xgboost$new, c(params_default, as.list(params_tune)))}) Did you see Lrnr_caret when we called sl3_list_learners(c(&quot;binomial&quot;))? All we need to specify is the algorithm to use, which is passed as method to caret::train(). The default method for parameter selection criterion with is set to “CV” instead of the caret::train() default boot. The summary metric to used to select the optimal model is RMSE for continuous outcomes and Accuracy for categorical and binomial outcomes. # I have no idea how to tune a neural net (or BART machine..) lrnr_caret_nnet &lt;- make_learner(Lrnr_caret, algorithm = &quot;nnet&quot;) lrnr_caret_bartMachine &lt;- make_learner(Lrnr_caret, algorithm = &quot;bartMachine&quot;, method = &quot;boot&quot;, metric = &quot;Accuracy&quot;, tuneLength = 10) In order to assemble the library of learners, we need to “stack” them together. A Stack is a special learner and it has the same interface as all other learners. What makes a stack special is that it combines multiple learners by training them simultaneously, so that their predictions can be either combined or compared. stack &lt;- make_learner(Stack, lrnr_glm, lrnr_mean, lrnr_lasso, lrnr_gam, lrnr_bayesglm, lrnr_ridge, lrnr_elasticnet ) We can optionally select a subset of available covariates and pass only those variables to the modeling algorithm. Let’s consider screening covariates based on their randomForest variable importance ranking (ordered by mean decrease in accuracy) screen_rf &lt;- make_learner(Lrnr_screener_randomForest, nVar = 5, ntree = 100) # which covariates are selected on the full data? screen_rf$train(ist_task) [1] &quot;Lrnr_screener_randomForest_5_100&quot; $selected [1] &quot;RDELAY&quot; &quot;SEX&quot; &quot;AGE&quot; &quot;RSLEEP&quot; &quot;RSBP&quot; To “pipe” only the selected covariates to the modeling algorithm, we need to make a Pipeline, which is a just set of learners to be fit sequentially, where the fit from one learner is used to define the task for the next learner. screen_rf_pipeline &lt;- make_learner(Pipeline, screen_rf, stack) Now our learners will be preceded by a screening step. We also consider the original stack, just to compare how the feature selection methods perform in comparison to the methods without feature selection. Analogous to what we have seen before, we have to stack the pipeline and original stack together, so we may use them as base learners in our super learner. fancy_stack &lt;- make_learner(Stack, screen_rf_pipeline, stack) # we can visualize the stack dt_stack &lt;- delayed_learner_train(fancy_stack, ist_task) plot(dt_stack, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) We will use the default metalearner, which uses Lrnr_solnp() to provide fitting procedures for a pairing of loss function and metalearner function. The default metalearner chooses loss and metalearner pairing based on the outcome type. Note that any learner can be used as a metalearner. We have made a library/stack of base learners, so we are ready to make the super learner. The super learner algorithm fits a metalearner on the validation-set predictions. sl &lt;- make_learner(Lrnr_sl, learners = fancy_stack ) # we can visualize the super learner dt_sl &lt;- delayed_learner_train(sl, ist_task) plot(dt_sl, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) We can also use Lrnr_cv to build a super learner, cross-validate a stack of learners to compare performance of the learners in the stack, or cross-validate any single learner (see “Cross-validation” section of this sl3 introductory tutorial). Furthermore, we can Define New sl3 Learners which can be used in all the places you could otherwise use any other sl3 learners, including Pipelines, Stacks, and the Super Learner. 3. Train the super learner on the machine learning task Now we are ready to “train” our super learner on our sl3_task object, ist_task. sl_fit &lt;- sl$train(ist_task) 4. Obtain predicted values Now that we have fit the super learner, we are ready to obtain our predicted values, and we can also obtain a summary of the results. sl_preds &lt;- sl_fit$predict() head(sl_preds) [1] 0.02258388 0.02983631 0.01773395 0.02196079 0.02002874 0.02863187 sl_fit$print() [1] &quot;SuperLearner:&quot; List of 2 $ : chr &quot;Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)&quot; $ : chr &quot;Stack&quot; [1] &quot;Lrnr_solnp_TRUE_TRUE_FALSE_1e-05&quot; $pars [1] 0.083192066 0.083405776 0.082694214 0.000146825 0.083205985 0.082854709 [7] 0.082843082 0.083641793 0.083405776 0.082604777 0.000146825 0.085334252 [13] 0.084214990 0.082308929 $convergence [1] 0 $values [1] 0.02333645 0.02307076 0.02307068 $lagrange [,1] [1,] 0.0002026852 $hessian [,1] [,2] [,3] [,4] [,5] [1,] 1.001343e+00 0.008468856 -0.002064526 0.11276649 0.0014419839 [2,] 8.468856e-03 1.013936925 0.006022054 0.13573265 0.0085403092 [3,] -2.064526e-03 0.006022054 0.993918691 0.09842449 -0.0019481050 [4,] 1.127665e-01 0.135732653 0.098424485 0.70721008 0.1131777537 [5,] 1.441984e-03 0.008540309 -0.001948105 0.11317775 1.0015405037 [6,] 5.012103e-05 0.007603594 -0.003644869 0.10606353 0.0001573283 [7,] -5.269688e-04 0.007158570 -0.004297774 0.10425057 -0.0004175851 [8,] 6.705526e-03 0.012435997 0.004150594 0.13267396 0.0067801290 [9,] 8.468856e-03 0.013936925 0.006022054 0.13573265 0.0085403092 [10,] -1.421163e-02 -0.003414011 -0.019763209 0.06159936 -0.0140511170 [11,] 1.127665e-01 0.135732650 0.098424480 -0.29278994 0.1131777497 [12,] 2.049478e-02 0.022489674 0.020272633 0.18787166 0.0205027060 [13,] 4.682702e-03 0.010643147 0.002072996 0.13134198 0.0047590116 [14,] -1.896971e-02 -0.006999489 -0.025221341 0.04495739 -0.0187891453 [,6] [,7] [,8] [,9] [,10] [1,] 5.012103e-05 -0.0005269688 0.006705526 0.008468856 -0.014211628 [2,] 7.603594e-03 0.0071585702 0.012435997 0.013936925 -0.003414011 [3,] -3.644869e-03 -0.0042977737 0.004150594 0.006022054 -0.019763209 [4,] 1.060635e-01 0.1042505732 0.132673960 0.135732653 0.061599365 [5,] 1.573283e-04 -0.0004175851 0.006780129 0.008540309 -0.014051117 [6,] 9.986170e-01 -0.0019936190 0.005805753 0.007603594 -0.016463839 [7,] -1.993619e-03 0.9973852399 0.005339198 0.007158570 -0.017333203 [8,] 5.805753e-03 0.0053391979 1.010860710 0.012435997 -0.005745065 [9,] 7.603594e-03 0.0071585702 0.012435997 1.013936925 -0.003414011 [10,] -1.646384e-02 -0.0173332025 -0.005745065 -0.003414011 0.962096585 [11,] 1.060635e-01 0.1042505688 0.132673957 0.135732650 0.061599358 [12,] 2.068544e-02 0.0205141947 0.021363025 0.022489674 0.016370118 [13,] 3.782925e-03 0.0032970122 0.008961526 0.010643147 -0.008252563 [14,] -2.153987e-02 -0.0225023662 -0.009499124 -0.006999489 -0.045264958 [,11] [,12] [,13] [,14] [1,] 0.11276649 0.02049478 0.004682702 -0.018969712 [2,] 0.13573265 0.02248967 0.010643147 -0.006999489 [3,] 0.09842448 0.02027263 0.002072996 -0.025221341 [4,] -0.29278994 0.18787166 0.131341980 0.044957389 [5,] 0.11317775 0.02050271 0.004759012 -0.018789145 [6,] 0.10606353 0.02068544 0.003782925 -0.021539872 [7,] 0.10425057 0.02051419 0.003297012 -0.022502366 [8,] 0.13267396 0.02136302 0.008961526 -0.009499124 [9,] 0.13573265 0.02248967 0.010643147 -0.006999489 [10,] 0.06159936 0.01637012 -0.008252563 -0.045264958 [11,] 0.70721005 0.18787166 0.131341976 0.044957382 [12,] 0.18787166 1.02291204 0.019733634 0.015324007 [13,] 0.13134198 0.01973363 1.006918139 -0.012138481 [14,] 0.04495738 0.01532401 -0.012138481 0.946536080 $ineqx0 NULL $nfuneval [1] 463 $outer.iter [1] 2 $elapsed Time difference of 1.778831 secs $vscale [1] 0.02307076 0.00001000 1.00000000 1.00000000 1.00000000 1.00000000 [7] 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 [13] 1.00000000 1.00000000 1.00000000 1.00000000 $coefficients Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glm_TRUE 0.083192066 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_mean 0.083405776 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.082694214 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_gam_NULL_NULL_GCV.Cp 0.000146825 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_pkg_SuperLearner_SL.bayesglm 0.083205985 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.082854709 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0.5_100_TRUE 0.082843082 Stack_Lrnr_glm_TRUE 0.083641793 Stack_Lrnr_mean 0.083405776 Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.082604777 Stack_Lrnr_gam_NULL_NULL_GCV.Cp 0.000146825 Stack_Lrnr_pkg_SuperLearner_SL.bayesglm 0.085334252 Stack_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.084214990 Stack_Lrnr_glmnet_NULL_deviance_10_0.5_100_TRUE 0.082308929 $training_offset [1] FALSE $name [1] &quot;solnp&quot; [1] &quot;Cross-validated risk (MSE, squared error loss):&quot; learner 1: Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glm_TRUE 2: Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_mean 3: Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 4: Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_gam_NULL_NULL_GCV.Cp 5: Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_pkg_SuperLearner_SL.bayesglm 6: Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 7: Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0.5_100_TRUE 8: Stack_Lrnr_glm_TRUE 9: Stack_Lrnr_mean 10: Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 11: Stack_Lrnr_gam_NULL_NULL_GCV.Cp 12: Stack_Lrnr_pkg_SuperLearner_SL.bayesglm 13: Stack_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 14: Stack_Lrnr_glmnet_NULL_deviance_10_0.5_100_TRUE 15: SuperLearner coefficients mean_risk SE_risk fold_SD fold_min_risk 1: 0.083192066 0.02311207 0.002048360 0.005294767 0.01765364 2: 0.083405776 0.02309466 0.002050044 0.005317404 0.01774964 3: 0.082694214 0.02312005 0.002051765 0.005313444 0.01774964 4: 0.000146825 14.33807429 0.032907910 0.303104053 13.98888617 5: 0.083205985 0.02311144 0.002048323 0.005294870 0.01765465 6: 0.082854709 0.02311347 0.002051415 0.005305988 0.01774851 7: 0.082843082 0.02311423 0.002051282 0.005315713 0.01773620 8: 0.083641793 0.02336042 0.002031224 0.005202322 0.01753999 9: 0.083405776 0.02309466 0.002050044 0.005317404 0.01774964 10: 0.082604777 0.02317198 0.002047574 0.005284023 0.01770221 11: 0.000146825 77.70481722 4.016142630 14.117849013 49.33521054 12: 0.085334252 0.02326082 0.002029412 0.005189117 0.01746325 13: 0.084214990 0.02307928 0.002042266 0.005269004 0.01748008 14: 0.082308929 0.02318300 0.002048446 0.005290096 0.01771318 15: NA 0.02307068 0.002050764 0.005310778 0.01758442 fold_max_risk 1: 0.03489955 2: 0.03496153 3: 0.03496153 4: 14.92699614 5: 0.03489984 6: 0.03496086 7: 0.03496153 8: 0.03491601 9: 0.03496153 10: 0.03491656 11: 94.04885520 12: 0.03474547 13: 0.03474668 14: 0.03493962 15: 0.03491967 4.3 Extensions 4.3.1 Cross-validated Super Learner We can cross-validate the super learner to see how well the super learner performs on unseen data, and obtain an estimate of the cross-validated risk of the super learner. This estimation procedure requires an “external” layer of cross-validation, also called nested cross-validation, which involves setting aside a separate holdout sample that we don’t use to fit the super learner. This external cross-validation procedure may also incorporate 10 folds, which is the default in sl3. However, we will incorporate 2 outer/external folds of cross-validation for computational efficiency. We also need to specify a loss function to evaluate super learner. Documentation for the available loss functions can be found in the sl3 Loss Function Reference. ist_task_new &lt;- make_sl3_Task( data = ist_data, covariates = covars, outcome = outcome, drop_missing_outcome = TRUE, folds = make_folds(n = sum(!is.na(ist_data$DRSISC)), fold_fun = folds_vfold, V = 2) ) CVsl &lt;- CV_lrnr_sl(sl_fit, ist_task_new, loss_loglik_binomial) CVsl %&gt;% kable(digits = 4) %&gt;% kable_styling(fixed_thead = T, font_size = 10) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;250px&quot;) learner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glm_TRUE 0.0833 0.1133 0.0082 0.0059 0.1091 0.1174 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_mean 0.0848 0.1120 0.0080 0.0063 0.1075 0.1165 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.0837 0.1127 0.0081 0.0053 0.1090 0.1165 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_gam_NULL_NULL_GCV.Cp 0.0003 NA 0.0012 NA NA NA Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_pkg_SuperLearner_SL.bayesglm 0.0834 0.1131 0.0082 0.0058 0.1090 0.1172 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.0842 0.1122 0.0080 0.0061 0.1079 0.1165 Pipeline(Lrnr_screener_randomForest_5_100-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0.5_100_TRUE 0.0842 0.1122 0.0080 0.0060 0.1080 0.1165 Stack_Lrnr_glm_TRUE 0.0752 0.1541 0.0170 0.0292 0.1335 0.1747 Stack_Lrnr_mean 0.0848 0.1120 0.0080 0.0063 0.1075 0.1165 Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.0844 0.1120 0.0080 0.0063 0.1076 0.1165 Stack_Lrnr_gam_NULL_NULL_GCV.Cp 0.0003 NA 0.0077 NA NA NA Stack_Lrnr_pkg_SuperLearner_SL.bayesglm 0.0828 0.1177 0.0087 0.0030 0.1156 0.1198 Stack_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.0844 0.1121 0.0080 0.0059 0.1080 0.1163 Stack_Lrnr_glmnet_NULL_deviance_10_0.5_100_TRUE 0.0840 0.1124 0.0080 0.0069 0.1075 0.1173 SuperLearner NA 0.1124 0.0082 0.0050 0.1089 0.1160 4.3.2 Variable Importance Measures with sl3 The sl3 varimp function returns a table with variables listed in decreasing order of importance, in which the measure of importance is based on a risk difference between the learner fit with a permuted covariate and the learner fit with the true covariate, across all covariates. In this manner, the larger the risk difference, the more important the variable is in the prediction. ist_varimp &lt;- varimp(sl_fit, loss_loglik_binomial) ist_varimp %&gt;% kable(digits = 4) %&gt;% kable_styling(fixed_thead = T, font_size = 10) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;250px&quot;) X risk_diff RDELAY NA RCONSC NA SEX NA AGE NA RSLEEP NA RATRIAL NA RCT NA RVISINF NA RHEP24 NA RASP3 NA RSBP NA RDEF1 NA RDEF2 NA RDEF3 NA RDEF4 NA RDEF5 NA RDEF6 NA RDEF7 NA RDEF8 NA STYPE NA RXHEP NA REGION NA MISSING_RATRIAL_RASP3 NA MISSING_RHEP24 NA RXASP NA 4.4 Exercise 4.4.1 Predicting Myocardial Infarction with sl3 Follow the steps below to predict myocardial infarction (mi) using the available covariate data. We thank Prof. David Benkeser at Emory University for making the this Cardiovascular Health Study (CHS) data accessible. # load the data set db_data &lt;- url(&quot;https://raw.githubusercontent.com/benkeser/sllecture/master/chspred.csv&quot;) chspred &lt;- read_csv(file = db_data, col_names = TRUE) # take a quick peek head(chspred) %&gt;% kable(digits = 4) %&gt;% kable_styling(fixed_thead = T, font_size = 10) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;200px&quot;) waist alcoh hdl beta smoke ace ldl bmi aspirin gend age estrgn glu ins cysgfr dm fetuina whr hsed race logcystat logtrig logcrp logcre health logkcal sysbp mi 110.1642 0.0000 66.4974 0 0 1 114.2162 27.9975 0 0 73.5179 0 159.9314 70.3343 75.0078 1 0.1752 1.1690 1 1 -0.3420 5.4063 2.0126 -0.6739 0 4.3926 177.1345 0 89.9763 0.0000 50.0652 0 0 0 103.7766 20.8931 0 0 61.7723 0 153.3888 33.9695 82.7433 1 0.5717 0.9011 0 0 -0.0847 4.8592 3.2933 -0.5551 1 6.2071 136.3742 0 106.1941 8.4174 40.5059 0 0 0 165.7158 28.4554 1 1 72.9312 0 121.7145 -17.3017 74.6989 0 0.3517 1.1797 0 1 -0.4451 4.5088 0.3013 -0.0115 0 6.7320 135.1993 0 90.0566 0.0000 36.1750 0 0 0 45.2035 23.9608 0 0 79.1191 0 53.9691 11.7315 95.7823 0 0.5439 1.1360 0 0 -0.4807 5.1832 3.0243 -0.5751 1 7.3972 139.0182 0 78.6143 2.9790 71.0642 0 1 0 131.3121 10.9656 0 1 69.0179 0 94.3153 9.7112 72.7109 0 0.4916 1.1028 1 0 0.3121 4.2190 -0.7057 0.0053 1 8.2779 88.0470 0 91.6593 0.0000 59.4963 0 0 0 171.1872 29.1317 0 1 81.8346 0 212.9066 -28.2269 69.2184 1 0.4621 0.9529 1 0 -0.2872 5.1773 0.9705 0.2127 1 5.9942 69.5943 0 Create an sl3 task, setting myocardial infarction mi as the outcome and using all available covariate data. Make a library of seven relatively fast base learning algorithms (i.e., do not consider BART or HAL). Customize hyperparameters for one of your learners. Feel free to use learners from sl3 or SuperLearner. You may use the same base learning library that is presented above. Incorporate feature selection with the SuperLearner screener screen.corP. Fit the metalearning step with non-negative least squares, Lrnr_nnls. With the metalearner and base learners, make the super learner and train it on the task. Print your super learner fit by calling print() with $. Which learner is the discrete super learner? Cross-validate your super learner fit to see how well it performs on unseen data. Specify loss_squared_error as the loss function to evaluate the super learner. Like above, create a new task with 2 folds of external cross-validation for computational efficiency. Report the cross-validated mean risk of the discrete super learner and the super learner. 4.5 Summary The general ensemble learning approach of super learner can be applied to a diversity of estimation and prediction problems that can be defined by a loss function. Plug-in estimators of the estimand are desirable because a plug-in estimator respects both the local and global constraints of the statistical model. Asymptotically linear estimators are also advantageous, since they converge to the estimand at \\(\\frac{1}{\\sqrt{n}}\\) rate, and thereby permit formal statistical inference. If we plug in the estimator returned by super learner into the target parameter mapping, then we would end up with an estimator that has the same bias as what we plugged in. This estimator would not be asymptotically linear. Targeted maximum likelihood estimation (TMLE) is a general strategy that succeeds in constructing asymptotically linear plug-in estimators. In the chapters that follow, we focus on the targeted maximum likelihood estimator and the targeted minimum loss-based estimator, both referred to as TMLE. 4.5.1 Exercise Solutions Here is a potential solution to the (sl3 Exercise – Predicting Myocardial Infarction with sl3)(???). chspred_task &lt;- make_sl3_Task( data = chspred, covariates = head(colnames(chspred), -1), outcome = &quot;mi&quot; ) glm_learner &lt;- Lrnr_glm$new() lasso_learner &lt;- Lrnr_glmnet$new(alpha = 1) ridge_learner &lt;- Lrnr_glmnet$new(alpha = 0) enet_learner &lt;- Lrnr_glmnet$new(alpha = 0.5) curated_glm_learner &lt;- Lrnr_glm_fast$new(formula = &quot;mi ~ smoke + beta + waist&quot;) mean_learner &lt;- Lrnr_mean$new() # That is one mean learner! glm_fast_learner &lt;- Lrnr_glm_fast$new() ranger_learner &lt;- Lrnr_ranger$new() svm_learner &lt;- Lrnr_svm$new() xgb_learner &lt;- Lrnr_xgboost$new() screen_cor &lt;- Lrnr_pkg_SuperLearner_screener$new(&quot;screen.corP&quot;) glm_pipeline &lt;- make_learner(Pipeline, screen_cor, glm_learner) stack &lt;- make_learner( Stack, glm_pipeline, glm_learner, lasso_learner, ridge_learner, enet_learner, curated_glm_learner, mean_learner, glm_fast_learner, ranger_learner, svm_learner, xgb_learner ) metalearner &lt;- make_learner(Lrnr_nnls) sl &lt;- Lrnr_sl$new( learners = stack, metalearner = metalearner ) sl_fit &lt;- sl$train(task) sl_fit$print() CVsl &lt;- CV_lrnr_sl(sl_fit, chspred_task, loss_squared_error) CVsl References "],
["one-step-tmle-for-time-to-event-outcomes.html", "Chapter 5 One-Step TMLE for Time-to-Event Outcomes 5.1 Learning Objectives 5.2 Introduction 5.3 Using MOSS for One-Step TMLE for Time-to-Event Outcomes", " Chapter 5 One-Step TMLE for Time-to-Event Outcomes Based on the MOSS R package by Wilson Cai and Mark van der Laan. Updated: 2019-12-04 5.1 Learning Objectives Format right-censored survival data for MOSS. Fit a SuperLearner initial estimate of the conditional survival function of failure, conditional survival function of censoring and the propensity scores (initial_sl_fit). Calculate the TMLE adjustment of the conditional survival fit (MOSS_hazard). Formulate a simultaneous confidence band for the estimated conditional survival across a range of time-points (compute_simultaneous_ci). 5.2 Introduction In this section, we explore the MOSS R package. This software performs ensemble machine learning with the SuperLearner R package and One-Step Targeted Maximum Likelihood Estimation (TMLE) to estimate counterfactual marginal survival functions and the Average Treatment Effect (ATE) on survival probabilities, while non-parametrically adjusting for measured confounding. This one-step TMLE can be executed via recursion in small local updates, and creates a doubly robust and semi-parametrically efficient estimator. Simultaneous confidence bands of the entire curve are also available for inference. 5.2.1 Existing Methods for Observational Survival Analysis To facilitate comparison with other estimation procedures, the following additional estimators are also included in the MOSS R package: Inverse Censoring Probability Weighted (IPCW) estimator, which re-weights the observed data by the inverse of the product of the propensity score and censoring probability before applying a standard estimation method (Rotnitzky and Robins 2014). Estimating Equation (EE) estimator, which improves IPCW by adding the sample mean of the efficient influence curve and is a locally efficient and double robust (Hubbard, Van Der Laan, and Robins 2000). TMLE works well to improve the statistical efficiency of EE Like EE, TMLE is also doubly robust and locally efficient. In contrast to these two methods, TMLE performs an adjustment on the estimate of the relevant part of the data-generating distribution before applying the parameter mapping and thus always respects the parameter space (probabilities falling inside [0,1]), a so-called substitution/plug-in estimator. As a result, is more robust to outliers and sparsity than non-substitution estimators. Motivating one-step TMLE: monotonic survival curve EE and TMLE utilize efficiency theory derived for univariate parameters, making estimation of the survival curve a collection of univariate survival probability estimators. This procedure can lead to a survival curve that is not monotonically decreasing. The one-step TMLE implemented in MOSS targets the survival curve as a whole and thus ensures monotonicity, while preserving the desirable performance of the point-wise TMLE (Cai and Laan 2019). 5.3 Using MOSS for One-Step TMLE for Time-to-Event Outcomes MOSS implementation consists of the following steps: Load the necessary libraries and data. Specify the right-censored survival data arguments. Estimate the (1) conditional survival function of failure event, (2) conditional survival function of censoring event, and (3) propensity score with the SuperLearner R package. Perform TMLE adjustment of the initial conditional survival fit. Compute standard error estimates for simulaneous inference. 0. Load necessary libraries and data library(MOSS) vet_data &lt;- read.csv(&quot;https://raw.githubusercontent.com/tlverse/deming2019-workshop/master/data/veteran.csv&quot;) head(vet_data) X trt celltype time status karno diagtime age prior 1 1 1 squamous 72 1 60 7 69 0 2 2 1 squamous 411 1 70 5 64 10 3 3 1 squamous 228 1 60 3 38 0 4 4 1 squamous 126 1 60 9 63 10 5 5 1 squamous 118 1 70 11 65 10 6 6 1 squamous 10 1 20 5 49 0 The variables in vet_data are * trt: treatment type (1 = standard, 2 = test), * celltype: histological type of the tumor, * time: time to death or censoring in days, * status: censoring status, * karno: Karnofsky performance score that describes overall patient status at the beginning of the study (100 = good), * diagtime: months from diagnosis to randomization, * age: age of patient in years, and * prior: prior therapy (0 = no, 10 = yes). 1. Specify right-censored survival data arguments The following variables need to be specified from the data so they can subsequently be used as required arguments for MOSS functions: W: dataframe of baseline covariates \\(W\\). A: binary treatment vector \\(A\\). T_tilde: time-to-event vector \\(\\tilde{T} = \\min(T, C)\\). Delta: censoring indicator vector \\(\\Delta = I(T \\leq C)\\). t_max: the maximum time to estimate the survival probabilities. We can specify these variables with our observed vet_data. T_tilde &lt;- vet_data$time Delta &lt;- vet_data$status A &lt;- vet_data$trt W &lt;- vet_data[, c(3, 6:9)] t_max &lt;- max(T_tilde) 2. Obtain initial estimates with SuperLearner R package We will use the initial_sl_fit() function to specify the data (as we defined it above) and the SuperLearner library for initial estimation of each of the following components of the likelihood: conditional survival function of failure event given treatment and confounders, conditional survival function for censoring event given treatment and confounders, and propensity score of treatment given confounders. We are forgetting one component of the likelihood that requires estimation: the joint distribution of confounders! In MOSS this estimation is done for us under the hood, and we do not use the SuperLearner. Do you recall why we do not use the SuperLearner to estimate the joint distribution of confounders nonparametrically? The conditional survival functions are estimated by first estimating the conditional hazard, and then transforming into the conditional survival function. For a thorough explanation of these procedure see Section 3 from (Cai and Laan 2019). Currently, MOSS requires the user to do this one-to-one tranformation from the conditional hazard to the conditional survival probabilities by calling the hazard_to_survival() method. We will address this later on. Back to initial_sl_fit() – we have the option to specify the following arguments in addition to the required data arguments. sl_failure: SuperLearner library for failure event hazard, default = c(“SL.glm”) sl_censoring: SuperLearner library for censoring event hazard, default = c(“SL.glm”) sl_treatment: SuperLearner library for propensity score, default = c(“SL.glm”) gtol: treshold for truncating propensity scores, default = 0.001) It is highly recommended that you specify a more complex library than the default. The SuperLearner library arguments take a vector of strings corresponding to learners available in the SuperLearner R package: https://github.com/ecpolley/SuperLearner/tree/master/R. We do not review the SuperLearner R package in these workshops, but a handy tutorial crafted a few years ago by our colleague Chris Kennedy is freely available: Guide to SuperLearner. # recall treatment was randomized SL.ranger.faster = function(...) { SL.ranger(..., num.trees = 100) } sl_lib_decent &lt;- c(&quot;SL.mean&quot;, &quot;SL.glm&quot;, &quot;SL.step.forward&quot;, &quot;SL.bayesglm&quot;, &quot;SL.ranger.faster&quot;, &quot;SL.gam&quot;) initial_fit &lt;- initial_sl_fit(T_tilde, Delta, A, W, t_max, sl_censoring = sl_lib_decent, sl_failure = sl_lib_decent) names(initial_fit) [1] &quot;density_failure_1&quot; &quot;density_failure_0&quot; &quot;density_censor_1&quot; [4] &quot;density_censor_0&quot; &quot;g1W&quot; The initial_fit object contains the fitted conditional densities for the failure events (density_failure_1 for test treatment group, density_failure_0 for standard treatment group), censoring events (density_censor_1 and density_censor_0 for test treatment and standard treatment groups, respectively), and propensity scores (a vector g1W). The density_failure_1 and density_failure_0 both need to go through the hazard_to_survival method which populates the survival attribute of the object. initial_fit$density_failure_1$hazard_to_survival() &lt;survival_curve&gt; Public: ci: function (A, T_tilde, Delta, density_failure, density_censor, clone: function (deep = FALSE) create_ggplot_df: function (W = NULL) display: function (type, W = NULL) hazard: 0.00949146643554085 0.00735066982443049 0.00893108123068 ... hazard_to_pdf: function () hazard_to_survival: function () initialize: function (t, hazard = NULL, survival = NULL, pdf = NULL) n: function () pdf: NULL pdf_to_hazard: function () pdf_to_survival: function () survival: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ... survival_to_hazard: function () survival_to_pdf: function () t: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ... initial_fit$density_failure_0$hazard_to_survival() &lt;survival_curve&gt; Public: ci: function (A, T_tilde, Delta, density_failure, density_censor, clone: function (deep = FALSE) create_ggplot_df: function (W = NULL) display: function (type, W = NULL) hazard: 0.00949146643554085 0.00735066982443049 0.00893108123068 ... hazard_to_pdf: function () hazard_to_survival: function () initialize: function (t, hazard = NULL, survival = NULL, pdf = NULL) n: function () pdf: NULL pdf_to_hazard: function () pdf_to_survival: function () survival: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ... survival_to_hazard: function () survival_to_pdf: function () t: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ... 3. Perform TMLE adjustment of the initial conditional survival estimate The one-step TMLE is carried out by many local least favorable submodels (LLFMs) (performed via logistic regressions) with small step sizes. The one-step TMLE updates in small steps locally along LLFM, ensuring that the direction of the update is optimal around the current probability density. This procedure permits updates to the conditional hazard for all points on the survival curve (or any high-dimensional parameter in general), so that the conditional hazard can be transformed into a monotone survival curve after the algorithm. At this point we are nearly ready to update the hazard using this constrained step size update. The only additional argument we need to define is k_grid: the vector of interested time points for estimation of the conditional survival probability. k_grid &lt;- 1:max(T_tilde) initial_fit$density_failure_1$t &lt;- k_grid initial_fit$density_failure_0$t &lt;- k_grid We perform the TMLE adjustment of the initial conditional survival estimate by first creating a MOSS_hazard or MOSS_hazard_ate object and then calling the iterate_onestep() method for this object. MOSS_hazard and MOSS_hazard_ate correspond to different estimators: MOSS_hazard: one-step TMLE of the treatment-specific survival curve, and MOSS_hazard_ate: one-step TMLE of ATE on survival probabilities One-step TMLE of the Treatment-Specific Survival # estimate survival curve for standard treatment group hazard_fit_standardA &lt;- MOSS_hazard$new( A, T_tilde, Delta, density_failure = initial_fit$density_failure_0, density_censor = initial_fit$density_censor_0, g1W = initial_fit$g1W, A_intervene = 1, k_grid ) psi_standardA &lt;- hazard_fit_standardA$iterate_onestep() # estimate survival curve for test treatment group hazard_fit_testA &lt;- MOSS_hazard$new( A, T_tilde, Delta, density_failure = initial_fit$density_failure_1, density_censor = initial_fit$density_censor_1, g1W = initial_fit$g1W, A_intervene = 2, k_grid ) psi_testA &lt;- hazard_fit_testA$iterate_onestep() One-step TMLE of ATE on Survival hazard_fit_ate &lt;- MOSS_hazard_ate$new( A, T_tilde, Delta, density_failure = initial_fit$density_failure_1, density_censor = initial_fit$density_censor_1, density_failure_0 = initial_fit$density_failure_0, density_censor_0 = initial_fit$density_censor_0, initial_fit$g1W ) psi_ate &lt;- hazard_fit_ate$iterate_onestep() summary(psi_ate) Min. 1st Qu. Median Mean 3rd Qu. Max. 0 0 0 0 0 0 4. Compute standard error estimates for simultaneous inference The simultaneous confidence bands for the survival curve estimates can be constructed based on asymptotic linearity of the TMLE uniform in all time points considered. After creating a vector of survival curve estimates by defining a new survival_curve object, we will estimate the efficient influence curve using the TML-estimates generated in the previous step. We obtain estimates for all times specified in k_grid by calling the all_t() method for eic objects. The eic estimates are obtained for each subject and time, so we construct a matrix of these estimates and calculate a simultaneous confidence band with this matrix by calling the method compute_simultaneous_ci(). See the manuscript accompanying the MOSS package for more details on constructing simultaneous inference (Cai and Laan 2019). # estimate and obtain inference for survival curve for standard treatment group survival_standardA &lt;- survival_curve$new(t = k_grid, survival = psi_standardA) survival_curve_standardA &lt;- as.vector(survival_standardA$survival) eic_standardA &lt;- eic$new( A = A, T_tilde = T_tilde, Delta = Delta, density_failure = hazard_fit_standardA$density_failure, density_censor = hazard_fit_standardA$density_censor, g1W = hazard_fit_standardA$g1W, psi = survival_curve_standardA, A_intervene = hazard_fit_standardA$A_intervene ) eic_matrix_standardA &lt;- eic_standardA$all_t(k_grid = k_grid) std_err_standardA &lt;- compute_simultaneous_ci(eic_matrix_standardA) upper_bound_standardA &lt;- survival_curve_standardA + (1.96*std_err_standardA) lower_bound_standardA &lt;- survival_curve_standardA - (1.96*std_err_standardA) plotdf_standardA &lt;- data.frame(time = k_grid, est = survival_curve_standardA, upper = upper_bound_standardA, lower = lower_bound_standardA, type = rep(&quot;standard&quot;, length(k_grid))) plot_standardA &lt;- ggplot(data = plotdf_standardA, aes(x = time, y = est)) + geom_line() + geom_ribbon(data = plotdf_standardA, aes(ymin = lower, ymax = upper), alpha = 0.5) + ggtitle(&quot;Treatment-Specific Survival Curves Among Standard Treatment Group in Veterans’ Administration Lung Cancer Trial&quot;) plot_standardA # estimate and obtain inference for survival curve for test treatment group survival_testA &lt;- survival_curve$new(t = k_grid, survival = psi_testA) survival_curve_testA &lt;- as.vector(survival_testA$survival) eic_testA &lt;- eic$new( A = A, T_tilde = T_tilde, Delta = Delta, density_failure = hazard_fit_testA$density_failure, density_censor = hazard_fit_testA$density_censor, g1W = hazard_fit_testA$g1W, psi = survival_curve_testA, A_intervene = hazard_fit_testA$A_intervene ) eic_matrix_testA &lt;- eic_testA$all_t(k_grid = k_grid) std_err_testA &lt;- compute_simultaneous_ci(eic_matrix_testA) upper_bound_testA &lt;- survival_curve_testA + (1.96*std_err_testA) lower_bound_testA &lt;- survival_curve_testA - (1.96*std_err_testA) plotdf_testA &lt;- data.frame(time = k_grid, est = survival_curve_testA, upper = upper_bound_testA, lower = lower_bound_testA, type = rep(&quot;test&quot;, length(k_grid))) plot_testA &lt;- ggplot(data = plotdf_testA, aes(x = time, y = est)) + geom_line() + geom_ribbon(data = plotdf_testA, aes(ymin = lower, ymax = upper), alpha = 0.5) + ggtitle(&quot;Treatment-Specific Survival Curves Among Test Treatment Group in Veterans’ Administration Lung Cancer Trial&quot;) plot_testA References "],
["r6.html", "Chapter 6 A Primer on the R6 Class System 6.1 Classes, Fields, and Methods 6.2 Object Oriented Programming: Python and R", " Chapter 6 A Primer on the R6 Class System A central goal of the Targeted Learning statistical paradigm is to estimate scientifically relevant parameters in realistic (usually nonparametric) models. The tlverse is designed using basic OOP principles and the R6 OOP framework. While we’ve tried to make it easy to use the tlverse packages without worrying much about OOP, it is helpful to have some intuition about how the tlverse is structured. Here, we briefly outline some key concepts from OOP. Readers familiar with OOP basics are invited to skip this section. 6.1 Classes, Fields, and Methods The key concept of OOP is that of an object, a collection of data and functions that corresponds to some conceptual unit. Objects have two main types of elements: fields, which can be thought of as nouns, are information about an object, and methods, which can be thought of as verbs, are actions an object can perform. Objects are members of classes, which define what those specific fields and methods are. Classes can inherit elements from other classes (sometimes called base classes) – accordingly, classes that are similar, but not exactly the same, can share some parts of their definitions. Many different implementations of OOP exist, with variations in how these concepts are implemented and used. R has several different implementations, including S3, S4, reference classes, and R6. The tlverse uses the R6 implementation. In R6, methods and fields of a class object are accessed using the $ operator. For a more thorough introduction to R’s various OOP systems, see http://adv-r.had.co.nz/OO-essentials.html, from Hadley Wickham’s Advanced R (Wickham 2014). 6.2 Object Oriented Programming: Python and R OO concepts (classes with inherentence) were baked into Python from the first published version (version 0.9 in 1991). In contrast, R gets its OO “approach” from its predecessor, S, first released in 1976. For the first 15 years, S had no support for classes, then, suddenly, S got two OO frameworks bolted on in rapid succession: informal classes with S3 in 1991, and formal classes with S4 in 1998. This process continues, with new OO frameworks being periodically released, to try to improve the lackluster OO support in R, with reference classes (R5, 2010) and R6 (2014). Of these, R6 behaves most like Python classes (and also most like OOP focused languages like C++ and Java), including having method definitions be part of class definitions, and allowing objects to be modified by reference. References "],
["references.html", "References", " References "]
]
